# %%
from groq import Groq
from crewai import Agent, Task, Crew, Process, LLM
from crewai_tools import SerperDevTool
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn
from fastapi.middleware.cors import CORSMiddleware

search_tool = SerperDevTool()

# %%
# Initialize the LLM
llm = LLM(
    model="groq/llama-3.3-70b-versatile",
    temperature=0.7
)

# Define Agents
guide = Agent(
    role="Senior Guide for Event Management Services we Provide in India",
    goal="To provide a detailed guide on the event management services we provide in India",
    backstory="I have been working in the event management industry for over 10 years and have a deep understanding of the services we provide in India.",
    llm=llm,
    tools=[search_tool],
    verbose=True,
    allow_delegation=False,
)

manager = Agent(
    role="Event Manager",
    goal="To manage the event management services we provide in India",
    backstory="I have been working in the event management industry for over 5 years and have experience in managing events in India.",
    llm=llm,
    tools=[search_tool],
    verbose=True,
    allow_delegation=False,
)

# %%
# Define FastAPI app
app = FastAPI()
# Add CORS middleware

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class EventRequest(BaseModel):
    query: str

@app.get("/")
def read_root():
    return {"message": "Welcome to Event Management API"}

@app.post("/get-event-info")
async def get_event_info(request: EventRequest):
    try:
        # Dynamically create tasks based on the query
        task1 = Task(
            description=f"Provide a guide based on the query: {request.query}",
            expected_output="A comprehensive guide tailored to the query",
            agent=guide,
            tools=[search_tool]
        )
        task2 = Task(
            description="Review and refine the guide generated by the first task",
            expected_output="A reviewed and refined guide make it more informative and engaging in not more than 100 words",
            agent=manager,
            tools=[search_tool]
        )

        # Create and run Crew
        crew = Crew(
            agents=[guide, manager],
            tasks=[task1, task2],
            process=Process.sequential,
            verbose=True
        )
        
        result = crew.kickoff()  # Run the Crew process
        
        return {"response": result}
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
